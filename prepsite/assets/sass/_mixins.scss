@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if  $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizelegibility;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
    text-rendering: optimizelegibility;
  }
}

@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
  @if $size { font-size: $size; }
  @if $colour { color: $colour; }
  @if $weight { font-weight: $weight; }
  @if $lh { line-height: $lh; }
}

/*
div::after {
    @include pseudo;
    top: -1rem; left: -1rem;
    width: 1rem; height: 1rem;
}
 */
@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}

/*
input,
textarea {
    @include input-placeholder {
        color: $grey;
    }
}
 */
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin bs-custom-row-and-col($row-class, $gutter:0) {
  .row.#{$row-class} {
    @if $gutter == 0 {
      margin-right: $gutter;
      margin-left: $gutter;
    } @else {
      margin-right: -$gutter;
      margin-left: -$gutter;
    }

    & > [class="col"],
    & > [class^="col-"],
    & > [class*=" col-"] {
      padding-right: $gutter;
      padding-left: $gutter;
    }
  }
}

/*
.site-header {
    padding: 2rem;
    font-size: 1.8rem;
    @include mq('tablet-wide') {
        padding-top: 4rem;
        font-size: 2.4rem;
    }
}
 */
$breakpoints: (
        "phone-small":  375px,
        "phone":        400px,
        "phone-wide":   480px,
        "phablet":      560px,
        "tablet-small": 640px,
        "tablet":       768px,
        "tablet-onwards": 769px,
        "tablet-wide":  1024px,
        "tablet-wide-onwards": 1025px,
        "desktop":      1248px,
        "desktop-wide": 1440px,
        "desktop-xlarge": 1920px,
        "desktop-xxlarge": 2560px
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-device-width: $width) {
      @content;
    }
  }
}

@mixin setBgColorAndHover($baseColor) {
  background-color: $baseColor;

  &:hover {
    background-color: darken($baseColor, 5%);
  }

  &:focus {
    background-color: darken($baseColor, 10%);
  }
}

/**
http://w3bits.com/clearfix/

Usage:
.cf {
  @include clearfix;
}
 */
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

/**
$grid-breakpoints: (
  xs: 0,
  sm: 480px,
  md: 768px,
  lg: 1024px
);

Usage:

.wrapper {
  margin: 0 auto;
  width: 100%;

  @include bs-grid('tablet') {
    width: 90%;
  }

  @include bs-grid('desktop') {
    width: 85%;
  }
}

In place of 'mobile', 'tablet', or 'desktop', you may also provide a custom breakpoint values, for eg:

.wrapper {
  @include screen('(min-width: 1367px)') {
    width: 1280px;
  }
}
 */
@mixin bs-grid($size) {
  $desktop: "(min-width: 1024px)";
  $tablet: "(min-width: 768px) and (max-width: 1023px)";
  $mobile-big: "(max-width: 767px)";
  $mobile-small: "(max-width: 480px)";

  @if $size == desktop {
    @media only screen and #{$desktop} {
      @content;
    }
  }

  @else if $size == tablet {
    @media only screen and #{$tablet} {
      @content;
    }
  }

  @else if $size == mobile-big {
    @media only screen and #{$mobile-big} {
      @content;
    }
  }

  @else if $size == mobile-small {
    @media only screen and #{$mobile-small} {
      @content;
    }
  }

  @else {
    @media only screen and #{$size} {
      @content;
    }
  }
}


/**
Show the retina images on retina-friendly devices only:

Usage:
.logo {
background-image: url("img/logo.png");
  @include retina("img/logo@2x.png", 100px, 21px);
}
 */
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

/**
Background Gradient

Usage:
.gradient {
  @include gradient(#07c, #06f, vertical);
}
 */
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

/**
Usage:
.podcasts {
  margin: 1em auto;

  @include rem-breakpoint(phablet){
    width: 100%;
  }
  @include rem-breakpoint(desktop){
    // maybe some desktop layout styles.
  }
}
 */
@mixin rem-breakpoint($point) {
  @if $point == desktop {
    @media (min-width: 70em) { @content ; }
  }
  @else if $point == laptop {
    @media (min-width: 64em) { @content ; }
  }
  @else if $point == tablet {
    @media (min-width: 50em) { @content ; }
  }
  @else if $point == phablet {
    @media (min-width: 37.5em)  { @content ; }
  }
  @else if $point == mobileonly {
    @media (max-width: 37.5em)  { @content ; }

  }
}